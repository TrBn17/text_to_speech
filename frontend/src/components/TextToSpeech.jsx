import React, { useState, useRef, useEffect } from 'react';
import { useTextToSpeech } from '../hooks/useApi';
import { useTTSModels } from '../hooks/useModels';
import { apiService } from '../services/api';
import env from '../config/environment';
import Sidebar from './common/Sidebar';
import { SettingsSection } from './common/SettingsSection';
import { Select, Textarea, Slider } from './common/FormControls';
import styles from '../styles/TextToSpeech.module.css';

const TextToSpeech = ({ generatedText }) => {
  const [text, setText] = useState('');
  const [voice, setVoice] = useState(env.defaults.tts.voice);
  const [speed, setSpeed] = useState(env.defaults.tts.speed);
  const [provider, setProvider] = useState(env.defaults.tts.provider);
  const [showAdvanced, setShowAdvanced] = useState(false);
  
  // NotebookLM states
  const [activeTab, setActiveTab] = useState('tts');
  const [isGeneratingNotebook, setIsGeneratingNotebook] = useState(false);
  const [notebookResult, setNotebookResult] = useState(null);
  const [notebookError, setNotebookError] = useState(null);
  const [customText, setCustomText] = useState(''); // Custom text for NotebookLM

  // Advanced options
  const [model, setModel] = useState('');
  const [systemPrompt, setSystemPrompt] = useState('');
  const [instructions, setInstructions] = useState('');
  const [responseFormat, setResponseFormat] = useState('mp3');
  const [languageCode, setLanguageCode] = useState('en-US');

  const audioRef = useRef(null);

  const { result, loading, error, audioUrl, generateSpeech, reset } = useTextToSpeech();
  const { models: apiTtsModels, voices: apiVoices, loading: modelsLoading } = useTTSModels();

  // Ensure apiVoices is always an object
  const safeApiVoices = apiVoices || { openai: [], google: [] };

  // Auto-populate text from generated text
  useEffect(() => {
    if (generatedText && generatedText.trim()) {
      setText(generatedText);
    }
  }, [generatedText]);

  // Filter models by current provider
  const getModelsForProvider = () => {
    if (!apiTtsModels || apiTtsModels.length === 0) return [];
    return apiTtsModels.filter(modelOption => {
      if (provider === 'openai') {
        return modelOption.provider === 'openai_tts';
      } else if (provider === 'google') {
        return modelOption.provider === 'google_tts' || modelOption.provider === 'gemini_tts';
      }
      return false;
    });
  };

  // Get voices for current provider
  const getVoicesForProvider = () => {
    if (provider === 'openai') {
      const openaiVoices = safeApiVoices?.openai || ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer'];
      // Ensure all voices are strings
      return openaiVoices.map(voice => 
        typeof voice === 'string' ? voice : (voice?.id || voice?.value || voice?.name || 'unknown')
      );
    } else if (provider === 'google') {
      // Handle both string array and object array
      const googleVoices = safeApiVoices?.google || [
        'natural_control', 'expressive', 'conversational',
        'en-US-Neural2-A', 'en-US-Neural2-B', 'en-US-Wavenet-A', 'en-US-Standard-A'
      ];
      // If it's array of objects, extract the id/value
      return googleVoices.map(voice => 
        typeof voice === 'string' ? voice : (voice?.id || voice?.value || voice?.name || 'unknown')
      );
    }
    return [];
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!text.trim()) {
      alert('Vui l√≤ng nh·∫≠p m·ªôt s·ªë vƒÉn b·∫£n');
      return;
    }

    try {
      await generateSpeech({
        text: text.trim(),
        voice,
        speed,
        provider,
        model: model || null,
        system_prompt: systemPrompt,
        instructions: instructions,
        response_format: responseFormat,
        language_code: languageCode,
      });
    } catch (err) {
      console.error('TTS generation failed:', err);
    }
  };

  const handlePlayAudio = () => {
    if (audioRef.current && audioUrl) {
      audioRef.current.play();
    }
  };

  const handleDownloadAudio = () => {
    if (audioUrl) {
      const link = document.createElement('a');
      link.href = audioUrl;
      link.download = `tts_${Date.now()}.mp3`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleReset = () => {
    reset();
    setText('');
  };

  // NotebookLM functions
  const handleGenerateNotebookAudio = async () => {
    if (!customText.trim()) {
      setNotebookError('Vui l√≤ng nh·∫≠p m·ªôt s·ªë vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh √¢m thanh');
      return;
    }

    setIsGeneratingNotebook(true);
    setNotebookError(null);
    setNotebookResult(null);

    try {
      console.log('üöÄ Starting NotebookLM audio generation...');
      console.log('üìù Using custom text (length:', customText.trim().length, 'chars)');
      
      const response = await apiService.generateNotebookLMAudio({
        custom_text: customText.trim()
      });
      
      console.log('‚úÖ NotebookLM generation completed:', response);
      setNotebookResult(response);
      
    } catch (err) {
      console.error('‚ùå NotebookLM generation failed:', err);
      setNotebookError(err.message || 'Kh√¥ng th·ªÉ t·∫°o √¢m thanh');
    } finally {
      setIsGeneratingNotebook(false);
    }
  };

  const formatProcessingTime = (seconds) => {
    if (!seconds) return 'N/A';
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return minutes > 0 ? `${minutes}m ${remainingSeconds}s` : `${remainingSeconds}s`;
  };

  const sampleTexts = [
    "Xin ch√†o, ƒë√¢y l√† vƒÉn b·∫£n m·∫´u ƒë·ªÉ chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.",
    "Con c√°o n√¢u nhanh nh·∫πn nh·∫£y qua con ch√≥ l∆∞·ªùi bi·∫øng.",
    "Tr√≠ tu·ªá nh√¢n t·∫°o ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta l√†m vi·ªác v√† s·ªëng.",
    "Ch√†o m·ª´ng ƒë·∫øn v·ªõi m√†n tr√¨nh di·ªÖn chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i c·ªßa ch√∫ng t√¥i.",
    "C√¥ng ngh·ªá n√†y gi√∫p ch√∫ng ta c√≥ th·ªÉ nghe n·ªôi dung thay v√¨ ch·ªâ ƒë·ªçc."
  ];

  return (
    <div className={styles.textToSpeech}>
      {/* Left Sidebar */}
      <Sidebar title="C√†i ƒë·∫∑t √¢m thanh">
        {/* Tab Navigation */}
        <SettingsSection title="">
          <div className={styles.tabNavigation}>
            <button
              onClick={() => setActiveTab('tts')}
              className={`${styles.tabButton} ${activeTab === 'tts' ? styles.active : ''}`}
            >
              S·ª≠ d·ª•ng API
            </button>
            <button
              onClick={() => setActiveTab('notebooklm')}
              className={`${styles.tabButton} ${activeTab === 'notebooklm' ? styles.active : ''}`}
            >
              √Çm thanh h·ªôi tho·∫°i
            </button>
          </div>
        </SettingsSection>

          {/* Settings based on active tab */}
          {activeTab === 'tts' && (
            <>
              <SettingsSection title="C·∫•u h√¨nh nh√† cung c·∫•p">
                <div className={styles.settingGroup}>
                  <label htmlFor="provider">Nh√† cung c·∫•p</label>
                  <Select
                    value={provider}
                    onChange={(e) => {
                      const newProvider = e.target.value;
                      setProvider(newProvider);
                      let providerVoices = [];
                      if (newProvider === 'openai') {
                        const openaiVoices = safeApiVoices?.openai || ['alloy'];
                        providerVoices = openaiVoices.map(voice =>
                          typeof voice === 'string' ? voice : (voice?.id || voice?.value || voice?.name || 'unknown')
                        );
                      } else if (newProvider === 'google') {
                        const googleVoices = safeApiVoices?.google || ['natural_control'];
                        providerVoices = googleVoices.map(voice =>
                          typeof voice === 'string' ? voice : (voice?.id || voice?.value || voice?.name || 'unknown')
                        );
                      }
                      if (providerVoices.length > 0) {
                        setVoice(providerVoices[0]);
                      }
                    }}
                    options={[
                      { value: "openai", label: "OpenAI TTS" },
                      { value: "google", label: "Google (Gemini + Cloud TTS)" }
                    ]}
                  />
                </div>

                <div className={styles.settingGroup}>
                  <label htmlFor="voice">Gi·ªçng n√≥i</label>
                  <Select
                    value={voice}
                    onChange={(e) => setVoice(e.target.value)}
                    options={getVoicesForProvider().map((v, index) => {
                      const voiceValue = typeof v === 'string' ? v : (v?.id || v?.value || v?.name || `voice-${index}`);
                      const voiceLabel = typeof v === 'string' ? v.charAt(0).toUpperCase() + v.slice(1) : (v?.label || v?.name || voiceValue);
                      return { value: voiceValue, label: voiceLabel };
                    })}
                  />
                </div>

                <div className={styles.settingGroup}>
                  <label>T·ªëc ƒë·ªô ({speed}x)</label>
                  <Slider
                    min={0.25}
                    max={4}
                    step={0.1}
                    value={speed}
                    onChange={(e) => setSpeed(parseFloat(e.target.value))}
                    valueFormatter={(v) => `${v}x`}
                  />
                </div>
              </SettingsSection>

              <SettingsSection title="">
                <button
                  type="button"
                  onClick={() => setShowAdvanced(!showAdvanced)}
                  className={styles.advancedToggle}
                >
                  {showAdvanced ? '·∫®n t√πy ch·ªçn n√¢ng cao' : 'T√πy ch·ªçn n√¢ng cao'}
                </button>

                {showAdvanced && (
                  <SettingsSection title="C√†i ƒë·∫∑t n√¢ng cao">
                    <div className={styles.settingGroup}>
                      <label htmlFor="model">M√¥ h√¨nh</label>
                      <Select
                        value={model}
                        onChange={(e) => setModel(e.target.value)}
                        disabled={modelsLoading}
                        options={[
                          { value: "", label: "M√¥ h√¨nh m·∫∑c ƒë·ªãnh" },
                          ...getModelsForProvider().map((modelOption) => ({
                            value: modelOption.value,
                            label: modelOption.label
                          }))
                        ]}
                      />
                    </div>

                    <div className={styles.settingGroup}>
                      <label htmlFor="responseFormat">ƒê·ªãnh d·∫°ng √¢m thanh</label>
                      <Select
                        value={responseFormat}
                        onChange={(e) => setResponseFormat(e.target.value)}
                        options={[
                          { value: "mp3", label: "MP3" },
                          { value: "wav", label: "WAV" },
                          { value: "opus", label: "OPUS" },
                          { value: "aac", label: "AAC" }
                        ]}
                      />
                    </div>

                    <div className={styles.settingGroup}>
                      <label htmlFor="languageCode">Ng√¥n ng·ªØ</label>
                      <Select
                        value={languageCode}
                        onChange={(e) => setLanguageCode(e.target.value)}
                        options={[
                          { value: "en-US", label: "English (US)" },
                          { value: "en-GB", label: "English (UK)" },
                          { value: "vi-VN", label: "Ti·∫øng Vi·ªát" },
                          { value: "ja-JP", label: "Ti·∫øng Nh·∫≠t" },
                          { value: "ko-KR", label: "Ti·∫øng H√†n" },
                          { value: "zh-CN", label: "Ti·∫øng Trung (Gi·∫£n th·ªÉ)" },
                          { value: "fr-FR", label: "Ti·∫øng Ph√°p" },
                          { value: "de-DE", label: "Ti·∫øng ƒê·ª©c" },
                          { value: "es-ES", label: "Ti·∫øng T√¢y Ban Nha" }
                        ]}
                      />
                    </div>

                    {/* Provider-specific options */}
                    {provider === 'openai' && (
                      <div className={styles.settingGroup}>
                        <label htmlFor="instructions">H∆∞·ªõng d·∫´n (OpenAI)</label>
                        <Textarea
                          value={instructions}
                          onChange={(e) => setInstructions(e.target.value)}
                          placeholder="H∆∞·ªõng d·∫´n b·ªï sung cho phong c√°ch gi·ªçng n√≥i..."
                          rows={2}
                        />
                      </div>
                    )}

                    {(provider === 'google') && (
                      <div className={styles.settingGroup}>
                        <label htmlFor="systemPrompt">L·ªùi nh·∫Øc h·ªá th·ªëng (Google)</label>
                        <Textarea
                          value={systemPrompt}
                          onChange={(e) => setSystemPrompt(e.target.value)}
                          placeholder="L·ªùi nh·∫Øc h·ªá th·ªëng ƒë·ªÉ ƒëi·ªÅu khi·ªÉn phong c√°ch TTS..."
                          rows={2}
                        />
                      </div>
                    )}
                  </SettingsSection>
                )}
              </SettingsSection>

              <SettingsSection title="H√†nh ƒë·ªông">
                <button
                  onClick={handleReset}
                  className={styles.clearButton}
                >
                  ƒê·∫∑t l·∫°i
                </button>
              </SettingsSection>
            </>
          )}

          {/* NotebookLM Settings */}
          {activeTab === 'notebooklm' && (
            <SettingsSection title="C√†i ƒë·∫∑t h·ªôi tho·∫°i">
              <div className={styles.infoBox} style={{ marginTop: '1rem' }}>
                <div>
                  <strong>FoxAI Native:</strong> Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n c·ªßa b·∫°n th√†nh cu·ªôc h·ªôi tho·∫°i t·ª± nhi√™n gi·ªØa hai ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh AI.
                </div>
              </div>
            </SettingsSection>
          )}
      </Sidebar>

      {/* Right Content Area */}
      <div className={styles.contentArea}>
        <div className={styles.contentHeader}>
          <h1 className={styles.contentTitle}>Chuy·ªÉn vƒÉn b·∫£n th√†nh h·ªôi tho·∫°i</h1>
        </div>

        <div className={styles.contentBody}>
          {/* TTS Tab Content */}
          {activeTab === 'tts' && (
            <>
              <form onSubmit={handleSubmit} className={styles.form}>
                {/* Text Input */}
                <div className={styles.formGroup}>
                  <label htmlFor="text" className={styles.label}>
                    VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
                    {generatedText && <span className={styles.labelNote}> (T·ª± ƒë·ªông ƒëi·ªÅn)</span>}
                  </label>
                  <textarea
                    id="text"
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    placeholder="Nh·∫≠p vƒÉn b·∫£n b·∫°n mu·ªën chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i..."
                    rows={8}
                    required
                    className={styles.textarea}
                  />

                  {/* Sample Texts */}
                  <div className={styles.sampleTexts}>
                    <div className={styles.sampleLabel}>M·∫´u nhanh:</div>
                    <div className={styles.sampleButtons}>
                      {sampleTexts.map((sample, index) => (
                        <button
                          key={index}
                          type="button"
                          onClick={() => setText(sample)}
                          className={styles.sampleButton}
                        >
                          M·∫´u {index + 1}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className={styles.buttonGroup}>
                  <button
                    type="submit"
                    disabled={loading}
                    className={styles.generateButton}
                  >
                    {loading ? (
                      <>
                        <span className={styles.loadingSpinner}></span>
                        ƒêang chuy·ªÉn ƒë·ªïi...
                      </>
                    ) : (
                      'Chuy·ªÉn th√†nh gi·ªçng n√≥i'
                    )}
                  </button>
                </div>
              </form>

              {/* Error Display */}
              {error && (
                <div className={styles.error}>
                  L·ªói: {error}
                </div>
              )}

              {/* Results Display */}
              {result && (
                <div className={styles.resultCard}>
                  <h3 className={styles.resultTitle}>K·∫øt qu·∫£ √¢m thanh</h3>

                  {result.success ? (
                    <div>
                      {/* Audio Player */}
                      {audioUrl && (
                        <div>
                          <audio
                            ref={audioRef}
                            src={audioUrl}
                            controls
                            className={styles.audioPlayer}
                          />

                          <div className={styles.audioControls}>
                            <button
                              onClick={handlePlayAudio}
                              className={styles.downloadButton}
                            >
                              Ph√°t √¢m thanh
                            </button>

                            <button
                              onClick={handleDownloadAudio}
                              className={styles.downloadButton}
                            >
                              T·∫£i xu·ªëng MP3
                            </button>
                          </div>
                        </div>
                      )}

                      {/* Audio Info */}
                      <div className={styles.audioInfo}>
                        <div className={styles.infoGrid}>
                          <div className={styles.infoItem}>
                            <strong>Gi·ªçng n√≥i:</strong> {result.voice}
                          </div>
                          <div className={styles.infoItem}>
                            <strong>Nh√† cung c·∫•p:</strong> {result.provider}
                          </div>
                          <div className={styles.infoItem}>
                            <strong>Th·ªùi l∆∞·ª£ng:</strong> {result.duration?.toFixed(1)}s
                          </div>
                          <div className={styles.infoItem}>
                            <strong>ƒê·ªãnh d·∫°ng:</strong> {result.audio_format?.toUpperCase()}
                          </div>
                        </div>
                      </div>

                      {/* Text Display */}
                      <div className={styles.convertedText}>
                        <h4>VƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi:</h4>
                        <p>{result.text}</p>
                      </div>
                    </div>
                  ) : (
                    <div className={styles.errorResult}>
                      Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i: {result.error}
                    </div>
                  )}
                </div>
              )}
            </>
          )}

          {/* NotebookLM Tab Content */}
          {activeTab === 'notebooklm' && (
            <form onSubmit={(e) => { e.preventDefault(); handleGenerateNotebookAudio(); }} className={styles.form}>
              {/* Custom Text Input */}
              <div className={styles.formGroup}>
                <label htmlFor="customText" className={styles.label}>VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi</label>
                <textarea
                  id="customText"
                  value={customText}
                  onChange={(e) => setCustomText(e.target.value)}
                  placeholder="D√°n vƒÉn b·∫£n c·ªßa b·∫°n v√†o ƒë√¢y ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh √¢m thanh h·ªôi tho·∫°i...

N·ªôi dung v√≠ d·ª•:
- B√†i vi·∫øt ho·∫∑c blog
- B√°o c√°o nghi√™n c·ª©u
- Ghi ch√∫ cu·ªôc h·ªçp
- N·ªôi dung gi√°o d·ª•c
- B·∫•t k·ª≥ vƒÉn b·∫£n n√†o b·∫°n mu·ªën th√†nh podcast h·ªôi tho·∫°i

AI s·∫Ω t·∫°o ra cu·ªôc h·ªôi tho·∫°i t·ª± nhi√™n gi·ªØa hai ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh th·∫£o lu·∫≠n v·ªÅ n·ªôi dung c·ªßa b·∫°n."
                  rows={10}
                  className={styles.textarea}
                  disabled={isGeneratingNotebook}
                />
                <div className={styles.textStats}>
                  <small className={styles.textHelp}>
                    D√°n b·∫•t k·ª≥ n·ªôi dung vƒÉn b·∫£n n√†o ƒë·ªÉ t·∫°o podcast theo phong c√°ch h·ªôi tho·∫°i
                  </small>
                  <small className={`${styles.charCount} ${customText.length > 10000 ? styles.warning : ''}`}>
                    {customText.length} k√Ω t·ª± {customText.length > 10000 && '(‚ö†Ô∏è VƒÉn b·∫£n r·∫•t d√†i)'}
                  </small>
                </div>
              </div>

              {/* Generate Button */}
              <div className={styles.buttonGroup}>
                <button
                  type="submit"
                  disabled={isGeneratingNotebook || !customText.trim()}
                  className={styles.notebookButton}
                >
                  {isGeneratingNotebook ? (
                    <>
                      <span className={styles.loadingSpinner}></span>
                      ƒêang t·∫°o √¢m thanh... (C√≥ th·ªÉ m·∫•t 5-15 ph√∫t)
                    </>
                  ) : (
                    'T·∫°o √¢m thanh h·ªôi tho·∫°i'
                  )}
                </button>
              </div>

              {/* Info */}
              <div className={styles.infoBox}>
                <div>
                  <strong>C√°ch ho·∫°t ƒë·ªông:</strong> D√°n vƒÉn b·∫£n c·ªßa b·∫°n v√†o √¥ tr√™n v√† nh·∫•n "Generate Conversation Audio". Qu√° tr√¨nh n√†y s·∫Ω t·ª± ƒë·ªông t·∫°o ra m·ªôt podcast ph√π h·ª£p.
                </div>
              </div>
              <div className={styles.alternativeBox}>
                <span>üõ†Ô∏è</span>
                {/* <div>
                  <strong>Manual Alternative:</strong>:
                  <ol className={styles.manualSteps}>
                    <li>Visit <a href="https://notebooklm.google.com/" target="_blank" rel="noopener noreferrer">notebooklm.google.com</a></li>
                    <li>Create a new notebook</li>
                    <li>Add your text as "Copied text"</li>
                    <li>Generate an "Audio Overview"</li>
                    <li>Download the generated audio file</li>
                  </ol>
                </div> */}
              </div>
            </form>
          )}
        </div>

        {/* Loading Progress */}
        {isGeneratingNotebook && (
          <div className={styles.loadingCard}>
            <h3 className={styles.resultTitle}>ƒêang t·∫°o √¢m thanh...</h3>
            <p className={styles.loadingText}>
              T·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát ƒëang di·ªÖn ra... Vui l√≤ng ƒë·ª£i ki√™n nh·∫´n.
            </p>
          </div>
        )}

        {/* Error Display */}
        {notebookError && (
          <div className={styles.error}>
            <strong>L·ªói x·∫£y ra</strong>
            <div className={styles.errorContent}>
              {notebookError.split('\n').map((line, index) => (
                <div key={index} className={styles.errorLine}>
                  {line}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Success Result */}
        {notebookResult && notebookResult.success && (
          <div className={styles.success}>
            <strong>T·∫°o √¢m thanh th√†nh c√¥ng!</strong>
            <div className={styles.successDetails}>
              <div>T·ªáp √¢m thanh: <code>{notebookResult.audio_url}</code></div>
              <div>Th·ªùi gian x·ª≠ l√Ω: {formatProcessingTime(notebookResult.processing_time)}</div>
              {notebookResult.text_info && (
                <div>N·ªôi dung: {notebookResult.text_info.content_length} k√Ω t·ª±</div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TextToSpeech;